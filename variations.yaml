common:
  r: length($v)
  rsq: $x * $x + $y * ($y)
  a: atan($x, $y)
  phi: atan($y, $x)
  sina: $x / $r
  cosa: $y / $r
  sinr: sin($r)
  cosr: cos($r)
  lr: float(gl_LocalInvocationID.x)/float(gl_WorkGroupSize.x - 1)

variations:
  linear:
    result: ($v)

  sinusoidal:
    result: sin($v)

  spherical:
    result: $v / ($rsq + EPS)

  swirl:
    src: |-
      float c1 = sin($rsq);
      float c2 = cos($rsq);
    result: vec2(c1 * $x - c2 * $y, c2 * $x + c1 * $y)

  horseshoe:
    result: vec2(($x + $y) * ($x - $y), 2.0 * $x * $y) / ($r + EPS)

  polar:
    result: vec2($a / PI, $r - 1.0)

  handkerchief:
    result: $r * vec2(sin($a + $r), cos($a - $r))

  heart:
    result: $r * vec2(sin($r * $a), -cos($r * $a))

  disc:
    result: $a * vec2(sin($r * PI), cos($r * PI)) / PI

  spiral:
    result: vec2($cosa + $sinr, $sina - $cosr) / ($r + EPS)

  hyperbolic:
    result: vec2($sina/($r + EPS), $cosa * $r)

  diamond:
    result: vec2($sina * $cosr, $cosa * $sinr)

  ex:
    src: |-
      float n0 = sin($a + $r);
      float n1 = cos($a - $r);
      float m0 = n0 * n0 * n0 * $r;
      float m1 = n1 * n1 * n1 * $r;
    result: vec2(m0 + m1, m0 - m1)

  julia:
    # round(randf()) means no branching
    result: "sqrt($r) * sincos(0.5 * $a + round(randf()) * PI).yx"

  bent:
    result: |-
      vec2(
        ($x < 0.0)? 2.0 * $x: $x,
        ($y < 0.0)? $y / 2.0: $y
      )

  waves:
    result: |-
      vec2(
        $x + $c10 * sin($y/($c20 * $c20 + EPS)),
        $y + $c11 * sin($x/($c21 * $c21 + EPS))
      )

  fisheye:
    result: 2.0 / ($r + 1.0) * vec2($y,$x)

  popcorn:
    result: |-
      vec2(
        $x + $c20 * sin(tan(3 * $y)),
        $y + $c21 * sin(tan(3 * $x))
      )

  exponential:
    result: exp($x - 1) * sincos(PI * $y).yx

  power:
    result: pow($r, $sina) * vec2($cosa, $sina)

  cosine:
    result: vec2(cos(PI * $x) * cosh($y), -sin(PI * $x) * sinh($y))

  rings:
    src: |-
      float rings_dx = $c20 * $c20 + EPS;
    result: (mod2($r + rings_dx, 2.0 * rings_dx) - rings_dx + $r * (1.0 - rings_dx)) * vec2($cosa, $sina)

  fan:
    src: |-
      float fan_dx = PI * ($c20 * $c20 + EPS);
      float fan_dx2 = fan_dx * 0.5;
      float fan_a = $a;
      fan_a += (mod2(fan_a+$c21,fan_dx) > fan_dx2) ? -fan_dx2 : fan_dx2;
    result: $r * sincos(fan_a).yx

  blob:
    param: 
      blob_high: {}
      blob_low: {}
      blob_waves: {}
    result: $r * ($blob_low + ($blob_high - $blob_low) * (0.5 + 0.5 * sin($blob_waves * $a))) * vec2($sina, $cosa)
      
  pdj:
    param:
      pdj_a: {}
      pdj_b: {}
      pdj_c: {}
      pdj_d: {}
    result: |-
      vec2(
        sin($pdj_a * $y) - cos($pdj_b * $x),
        sin($pdj_c * $x) - cos($pdj_d * $y)
      )

  fan2:
    param:
      fan2_x: {}
      fan2_y: {}
    src: |-
      float fan2_dx = PI * ($fan2_x * $fan2_x + EPS);
      float fan2_dx2 = 0.5 * fan2_dx;
      float fan2_a = $a;
      float fan2_t = $a + $fan2_y - fan2_dx * floor(($a + $fan2_y)/fan2_dx);
      if(fan2_t > fan2_dx2) 
        fan2_a = fan2_a - fan2_dx2;
        else fan2_a = fan2_a + fan2_dx2;
    result: $r * sincos(fan2_a)

  rings2:
    param:
      rings2_val: {}
    src: |-
      float rings2_dx = $rings2_val * $rings2_val + EPS;
      float rings2_r = $r;
      rings2_r += -2.0 * rings2_dx * float(int((rings2_r + rings2_dx)/(2.0 * rings2_dx))) + rings2_r * (1.0 - rings2_dx);
    result: rings2_r * vec2($sina, $cosa)

  eyefish:
    result: 2.0 / ($r + 1.0) * ($v)

  bubble:
    result: ($v)/fma($rsq, 0.25, 1.0)

  perspective:
    param:
      perspective_angle: {}
      perspective_dist: {}
    result: |-
      vec2($x * $perspective_dist, $perspective_dist * cos($perspective_angle) * $y) 
      / ($perspective_dist - $y * sin($perspective_angle))

  noise:
    result: $v * randf() * sincos(randf() * 2.0 * PI).yx

  julian:
    param:
      julian_power: {}
      julian_dist: {}
    src: |-
      int julian_t_rnd = int(trunc(abs($julian_power) * randf()));
    result: |-
      pow($r, $julian_dist / $julian_power) 
      * sincos(
          ($phi + 2.0 * PI * float(julian_t_rnd)) 
          / $julian_power
      ).yx

  juliascope:
    param:
      juliascope_power: {}
      juliascope_dist: {}
    src: |-
      int juliascope_t_rnd = int(trunc(abs($juliascope_power) * randf()));
    result: |-
      pow($r, $juliascope_dist / $juliascope_power)
      * sincos(
            (2 * PI * float(juliascope_t_rnd) + (((juliascope_t_rnd & 1) == 0)? 1: -1) * $phi)
            / $juliascope_power
        ).yx

  blur:
    result: randf() * sincos(randf() * 2.0 * PI).yx

  gaussian_blur:
    result: (randf() + randf() + randf() + randf() - 2.0) * sincos(randf() * 2.0 * PI).yx

  radial_blur:
    param:
      radial_blur_angle: {}
    flags: [no_weight_mul]
    src: |-
      vec2 radial_blur_spinzoom = sincos($radial_blur_angle * PI / 2.0);
      float radial_blur_rndg = $weight * (randf() + randf() + randf() + randf() - 2.0);
      vec2 tmpa = sincos($phi + radial_blur_spinzoom.x * radial_blur_rndg);
      float radial_blur_rz = radial_blur_spinzoom.y * radial_blur_rndg - 1.0;
    result: "vec2($r * tmpa.y + radial_blur_rz * $x, $r * tmpa.x + radial_blur_rz * $y)"

  pie:
    param:
      pie_slices: {}
      pie_rotation: {}
      pie_thickness: {}
    result: randf() * sincos($pie_rotation + 2.0 * PI * (trunc(randf() * $pie_slices + 0.5) + randf() * $pie_thickness)/$pie_slices)

  ngon:
    param:
      ngon_power: {}
      ngon_sides: {}
      ngon_corners: {}
      ngon_circle: {}
    src: |-
      float ngon_r_factor = pow($rsq, $ngon_power * 0.5);
      float ngon_b = 2.0 * PI / ($ngon_sides + EPS);
      float ngon_phi = $phi - (ngon_b * floor($a/ngon_b));
      if(ngon_phi > ngon_b * 0.5) ngon_phi -= ngon_b;
    result: ($ngon_corners * (1.0 / (cos(ngon_phi) + EPS) - 1.0) + $ngon_circle)/(ngon_r_factor + EPS) * ($v)

  curl:
    param:
      curl_c1: {}
      curl_c2: {}
    src: |-
      float curl_re = 1.0 + $curl_c1 * $x + $curl_c2 * ($x * $x - $y * $y);
      float curl_im = $curl_c1 * $y + 2.0 * $curl_c2 * $x * $y;
    result: vec2($x * curl_re + $y * curl_im, $y * curl_re - $x * curl_im) / (curl_re * curl_re + curl_im * curl_im)

  rectangles:
    param:
      rectangles_x: {}
      rectangles_y: {}
    result: |-
      vec2(
        ($rectangles_x == 0)? $x: ((2 * floor($x/$rectangles_x) + 1.0) * $rectangles_x - $x),
        ($rectangles_y == 0)? $y: ((2 * floor($y/$rectangles_y) + 1.0) * $rectangles_y - $y)
      )
  
  arch:
    src: |-
      vec2 arch_sc = sincos(randf() * $weight * PI);
    result: vec2(arch_sc.x, arch_sc.x * arch_sc.x / arch_sc.y)

  tangent:
    result: vec2(sin($x)/cos($y), tan($y))

  square:
    result: vec2(randf() - 0.5, randf() - 0.5)

  rays:
    src: |-
      float rays_ang = $weight * randf() * PI;
      float rays_r = $weight / ($rsq + EPS);
    result: tan(rays_ang) * rays_r * vec2(cos($x), sin($y))

  blade:
    src: |-
      vec2 blade_sc = sincos(randf() * $weight * $r);
    result: vec2($x * (blade_sc.y + blade_sc.x), $x * (blade_sc.y - blade_sc.x))

  secant2:
    src: |-
      float secant2_cr = cos($weight * $r);
      float secant2_icr = 1.0/secant2_cr;
    result: "vec2($x, secant2_icr + ((secant2_cr < 0)? 1: -1))"

  twintrian:
    src: |-
      vec2 twint_sc = sincos(randf() * $weight * $r);
      float twint_diff = log10(twint_sc.x * twint_sc.x) + twint_sc.y;
      if(badval(diff)) diff = -30.0;
    result: vec2( $x * twint_diff, $x * (twint_diff - twint_sc.x * PI))

  cross:
    src: |-
      float cross_s = $x * $x - $y * $y;
    result: $v * sqrt(1.0/(cross_s * cross_s + EPS))

  disc2:
    param:
      disc2_rot: {}
      disc2_twist: {}
    src: |-
      float disc2_timespi = $disc2_rot * PI;
      vec2 disc2_addsc = sincos($disc2_twist);
      disc2_addsc.y -= 1;
      disc2_addsc *= 1 + $disc2_twist + (($disc2_twist > 2.0 * PI)? -2.0: 2.0) * PI;
      vec2 disc2_tsc = sincos(disc2_timespi * ($x + $y));
    result: vec2(disc2_tsc.x + disc2_addsc.y, disc2_tsc.y + disc2_addsc.x) * $a / PI;

  super_shape:
    param:
      super_shape_n1: {}
      super_shape_n2: {}
      super_shape_n3: {}
      super_shape_m: {}
      super_shape_holes: {}
      super_shape_rnd: {}
    src: |-
      vec2 super_shape_sc = sincos($super_shape_m * 0.25 * $phi + PI * 0.25);
    result: $v * (mix($r, randf(), $super_shape_rnd) - $super_shape_holes) * pow(pow(abs(super_shape_sc.y), $super_shape_n2)+pow(abs(super_shape_sc.x), $super_shape_n3), -1.0 / $super_shape_n1) / $r

  flower:
    param:
      flower_holes: {}
      flower_petals: {}
    result: $v * (randf() - $flower_holes) * cos($flower_petals * $phi) / $r;

  conic:
    param:
      conic_holes: {}
      conic_eccentricity: {}
    result: $v * (randf() - $conic_holes) * $conic_eccentricity / (1 + $conic_eccentricity * $x / $r) / $r

  parabola:
    param:
      parabola_height: {}
      parabola_width: {}
    result: vec2( $parabola_height * $sinr * $sinr * randf(), $parabola_width * $cosr * randf())

  bent2:
    param:
      bent2_x: {}
      bent2_y: {}
    result: "vec2(($x < 0.0) $x * $bent2_x : $x, ($y < 0.0) $y * $bent2_y : $y)"

  bipolar:
    param:
      bipolar_shift: {}
    src: |-
      float bipolar_t = $rsq + 1.0;
      float bipolar_x2 = 2.0 * $x;
      float bipolar_ps = -PI_2 * $bipolar_shift;
      float bipolar_y = 0.5 * atan(2.0 * $y, $rsq - 1.0) + bipolar_ps;
      if( bipolar_y > PI_2 ) bipolar_y = -PI_2 + mod2(bipolar_y + PI_2, PI);
      else if(y < -PI_2) y = PI_2 - mod2(PI_2 - bipolar_y, PI);
    result: vec2(0.25 * 2.0 / PI * log((bipolar_t + bipolar_x2)/(bipolar_t - bipolar_x2)), 2.0 / PI * $y)

  boarders:
    src: |-
      float boarders_rx = round($x);
      float boarders_ry = round($y);
      float boarders_ox = $x - boarders_rx;
      float boarders_oy = $y - boarders_ry;
      vec2 boarders_result;
      if(randf() >= 0.75) {
            boarders_result = vec2(
                boarders_ox * 0.5 + boarders_rx, 
                boarders_oy * 0.5 + boarders_ry
            );
      } else {
            if(abs(boarders_ox) >= abs(boarders_oy)) {
                if(boarders_ox > 0.0) {
                    boarders_result = vec2(
                        boarders_ox * 0.5 + boarders_rx + 0.25, 
                        boarders_oy * 0.5 + boarders_ry + 0.25 * boarders_oy / boarders_ox
                    );
                } else {
                    boarders_result = vec2(
                        boarders_ox * 0.5 + boarders_rx - 0.25, 
                        boarders_oy * 0.5 + boarders_ry - 0.25 * boarders_oy / boarders_ox
                    );
                }
            } else {
                if(boarders_oy > 0.0) {
                    boarders_result = vec2(
                        boarders_ox * 0.5 + boarders_rx + 0.25 * boarders_ox / boarders_oy,
                        boarders_oy * 0.5 + boarders_ry + 0.25 
                    );
                } else {
                    boarders_result = vec2(
                        boarders_ox * 0.5 + boarders_rx - 0.25 * boarders_ox / boarders_oy,
                        boarders_oy * 0.5 + boarders_ry - 0.25 
                    );
                }
            }
      }
    result: boarders_result

  butterfly:
    src: |-
      float butterfly_y2 = 2.0 * $y;
    result: 1.3029400317411197908970256609023 * sqrt(abs($x * $y)/(EPS + $x * $x + butterfly_y2 * butterfly_y2)) * vec2($x, butterfly_y2)

  cell:
    param:
      cell_size: {}
    src: |-
      float inv_cell_size = 1.0 / $cell_size;
      ivec2 cell_xy = ivec2(int(floor($x * inv_cell_size)), int(floor($y * inv_cell_size)));
      vec2 cell_dxy = vec2($x - cell_xy.x * $cell_size, $y - cell_xy.y * $cell_size);
      if(cell_xy.y >= 0) {
            if(cell_xy.x >= 0) cell.xy *= 2;
            else cell_xy = ivec2( -(cell_xy.x * 2 + 1), cell_xy.y * 2);
      } else
            if(cell.xy.x >= 0) cell_xy = ivec2(cell_xy.x * 2, -(cell_xy.y * 2 + 1));
            else cell_xy = ivec2(-(cell_xy.x * 2 + 1), -(cell_xy.y * 2 + 1));
      }
    result: vec2(cell_dxy.x + cell_xy.x * $cell_size, cell_dxy.y + cell_xy.y * $cell_size)

  cpow:
    param:
      cpow_power: {}
      cpow_r: {}
      cpow_i: {}
    src: |-
      float cpow_lnr = 0.5 * log($rsq);
      float cpow_va = 2.0 * PI / $cpow_power;
      float cpow_vc = $cpow_r / $cpow_power;
      float cpow_cd = $cpow_i / $cpow_power;
    result: exp(cpow_vc * cpow_lnr - cpow_vd * $phi) * sincos(cpow_vc * $phi + cpow_vd * cpow_lnr + cpow_va * floor($cpow_power * randf())).yx

  curve:
    param:
      curve_xlength: {}
      curve_ylength: {}
      curve_xamp: {}
      curve_yamp: {}
    result: |-
        vec2(
            $x + $curve_xamp * exp(-$y * $y / max($curve_xlength * $curve_xlength, 1E-20)),
            $y + $curve_yamp * exp(-$x * $x / max($curve_ylength * $curve_ylength, 1E-20))
        )

  edisc:
    src: |-
      float edisc_tmp = $rsq + 1.0;
      float edisc_tmp2 = 2.0 * $x;
      float edisc_xmax = (sqrt(edisc_tmp + edisc_tmp2) + sqrt(edisc_tmp + edisc_tmp2)) * 0.5;
      float edisc_a2 = -acos($x / edisc_xmax);
      vec2 edisc_vsc = sincos(log(edisc_xmax + sqrt(edisc_xmx - 1.0)));
      vec2 edisc_hsc = vec2(sinh(edisc_a2), cosh(edisc_a2));
      if($y > 0.0) edisc_vsc.x *= -1.0;
    result: vec2(edisc_hsc.y * edisc_vsc.y, edisc_hsc.x * edisc_vsc.x) / 11.57034632

  # End normal variation work

  foci:
    src: |-
      float foci_expx = exp($x) * 0.5;
      float foci_expnx = 0.25 / foci_expx;
      vec2 foci_sc = sincos($y);
    result: vec2(foci_expx - foci_expnx, foci_sc.x) / (foci_expx + foci_expnx - foci_sc.y)

  oscope:

  loonie:
    src: |-
      float loonie_w2 = $weight * $weight;
    result: "$v * (( $rsq < loonie_w2)? sqrt(loonie_w2/$rsq - 1.0): 1.0)"

  exp:
    result: exp($x) * sincos($y).yx

  log:
    result: vec2(0.5 * log($rsq), $phi)

  sin:
    result: sincos($x) * sinhcosh($y).yx

  cos:
    result: sincos($x).yx * sinhcosh($y).yx

  sinh:
    src: |-
      vec2 sinhsc = sincos($y);
    result: vec2( sinh($x) * sinhsc.y, cosh($x) * sinhsc.x)

  pre_blur:
    flags: [pre_xform]
    result: (randf() + randf() + randf() + randf() - 2.0) * sincos(randf() * 2.0 * PI).yx

  waves2:
    param:
      waves2_scalex: {}
      waves2_scaley: {}
      waves2_freqx: {}
      waves2_freqy: {}
    result: |-
      vec2(
        $x + $waves2_scalex * sin($y * $waves2_freqx),
        $y + $waves2_scaley * sin($x * $waves2_freqy)
      )

  cylinder:
    result: vec2(sin($x), $y)

  coth:
    src: |-
      vec2 cothsc = sincos(2.0 * $y);
      float cothsinh = sinh(2.0 * $x);
      float cothcosh = cosh(2.0 * $x);
      float cothden = 1.0/(cothcosh - cothsc.y);
    result: cothden * vec2(cothsinh, cothsc.x)f

  auger:
    param:
      auger_freq: {}
      auger_scale: {}
      auger_sym: {}
      auger_weight: {}
    src: |-
      float auger_s = sin($x * $auger_freq);
      float auger_t = sin($y * $auger_freq);
      float auger_dy = $y + $auger_weight * ($auger_scale * auger_s / 2.0 + abs($y) * auger_s);
      float auger_dx = $x + $auger_weight * ($auger_scale * auger_t / 2.0 + abs($x) * auger_t);
    result: vec2($x + $auger_sym * (auger_dx - $x), auger_dy)

  flux:
    param:
      flux_spread: {}
    src: |-
      float flux_xpw = $x + $weight;
      float flux_xmw = $x - $weight;
    result: |-
        (2.0 + $flux_spread) 
        * sqrt( sqrt( $y * $y + flux_xpw * flux_xpw) / sqrt( $y * $y + flux_xmw * flux_xmw) )
        * sincos((atan($y, flux_xmw) - atan($y, flux_xpw)) * 0.5).yx

  mobius:
    param:
      mobius_re_a: {}
      mobius_re_b: {}
      mobius_re_c: {}
      mobius_re_d: {}
      mobius_im_a: {}
      mobius_im_b: {}
      mobius_im_c: {}
      mobius_im_d: {}
    src: |-
      float mobius_re_u = $mobius_re_a * $x - $mobius_im_a * $y + $mobius_re_b;
      float mobius_im_u = $mobius_re_a * $y + $mobius_im_a * $x + $mobius_im_b;
      float mobius_re_v = $mobius_re_c * $x - $mobius_im_c * $y + $mobius_re_d;
      float mobius_im_v = $mobius_re_c * $y + $mobius_im_c * $x + $mobius_im_d;
    result: |-
      vec2(
        mobius_re_u * mobius_re_v + mobius_im_u * mobius_im_v,
        mobius_im_u * mobius_re_v - mobius_re_u * mobius_im_v
      ) / (mobius_re_v * mobius_re_v + mobius_im_v * mobius_im_v)